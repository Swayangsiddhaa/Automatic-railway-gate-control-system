#include <Servo.h>

// Servo motors for the two gates
Servo gateServo1;  
Servo gateServo2;  

// ===== Ultrasonic Sensor 1 (Active) =====
const int trigPin1 = 11; // Trigger pin (direction 1)
const int echoPin1 = 12; // Echo pin

// ===== Ultrasonic Sensor 2 (Placeholder - Disabled) =====
// const int trigPin2 = 13; // Trigger pin (direction 2)
// const int echoPin2 = A0; // Echo pin

// LEDs & Buzzer (Shared for both directions)
const int redLedPin = 6;   
const int greenLedPin = 7; 
const int buzzerPin = 8;   

// Timing variables for auto-opening gates
unsigned long gateCloseTime = 0;
const unsigned long autoOpenDelay = 2 * 1000; // 2 seconds in milliseconds

// Gate status tracking
bool gatesClosed = false;

void setup() {
  // Attach servos
  gateServo1.attach(9);
  gateServo2.attach(10);

  // Sensor 1 pins
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);

  // Sensor 2 pins (commented - enable when using)
//   pinMode(trigPin2, OUTPUT);
//   pinMode(echoPin2, INPUT);

  // LEDs and buzzer
  pinMode(redLedPin, OUTPUT);
  pinMode(greenLedPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Start with gates open
  openGates();
}

void loop() {
  // Get distance from Sensor 1
  long distance1 = getDistance(trigPin1, echoPin1);

  // Get distance from Sensor 2 (enable when using)
  // long distance2 = getDistance(trigPin2, echoPin2);

  // Check for train from any active direction
  if (
      (distance1 > 0 && distance1 < 20) // Sensor 1 detects
      // || (distance2 > 0 && distance2 < 20) // Sensor 2 detects (uncomment when enabled)
     ) 
  {
    if (!gatesClosed) {
      closeGates();
      gateCloseTime = millis();
      gatesClosed = true;
    }
  }

  // Auto-open after delay
  if (gatesClosed && millis() - gateCloseTime >= autoOpenDelay) {
    openGates();
    gatesClosed = false;
  }
}

// ===== Measure distance from ultrasonic sensor =====
long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2;

  // Return -1 if invalid reading
  if (distance == 0 || duration == 0) {
    return -1;
  }
  return distance;
}

// ===== Open the gates =====
void openGates() {
  gateServo1.write(90);
  gateServo2.write(90);
  digitalWrite(greenLedPin, HIGH);
  digitalWrite(redLedPin, LOW);
  digitalWrite(buzzerPin, LOW);
}

// ===== Close the gates =====
void closeGates() {
  gateServo1.write(0);
  gateServo2.write(0);
  digitalWrite(greenLedPin, LOW);
  digitalWrite(redLedPin, HIGH);
  digitalWrite(buzzerPin, HIGH);
}
